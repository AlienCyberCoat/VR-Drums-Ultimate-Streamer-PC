Code:
string hello = "Hello, World";
is a string variable named "hello" that contains "Hello, World" (without the quotes).

Code:
int four = 4;
is an integer variable named "four" containing the number 4.

Class - An user-defined variable type that contains other types within it, along with methods and properties.

Method - A set of instructions that can be easily re-executed by calling on its name. It must have a return "type" (same list as variables, though can be class names, too). You may use the "void" return type to not be required to return a result from a method.

Code:
int AddNumbers(int num1, int num2)
{     
     int total = 0;
     
     total = num1 + num2;

     return total;
}
This would let you call the method AddNumbers, and tell it what two numbers you wanted to add together. It would return the answer:

Code:
int total = 0;
total = AddNumbers(1,2);
PrintToScreen(total);
would print out the number "3" on the screen.

Square Brackets ([]) - These are used for things called arrays. Basically, it is a variable that contains a bunch of values instead of a single one. The square brackets let you access the different values contained within.

Curly Brace ({}) - These are used to denote code blocks within the code, so C# knows when you are done doing something associated with the code block.

Ok, so on to the actual code in the shot:

Code:
string actionNameBase = "OnOff";
string actionName = "OnOff_On";
This is assigning two "string" type variables, actionNameBase and actionName.

actionNameBase is "OnOff"

and

actionName = "OnOff_On"

Code:
Random rnd = new Random();
Random is a pre-defined class in C# for handling "random" numbers. So, the line is saying:

New variable named "rnd". It should be a class of type "Random". It should be a new initialization of the "Random" class (not a previously used "random" class variable).

Code:
List&lt;IMyTerminalBlock> blocks = new List&lt;IMyTerminalBlock>[];
Make a new "List" class of the class type "IMyTerminalBlock" named "blocks". Make this a new initialization of the list class. This is an array. (Hence the [] at the end.)

Code:
void Main()
Every C# program has a Main() method. It MUST have a capital M, and it MUST be a "void" type.

Code:
blocks.Clear()
This is a method defined by the "List" class that "clears" (empties) the entire list out.

Code:
GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock>(blocks);
This is where we go into foggy territory-- this isn't a "C#" standard function, but using Common SenseÂ® we can figure out what it does. So let's break it down:

GridTerminalSystem - Accesses the grid the terminal is located on?
GetBlocksOfType&lt;IMyLightingBlock>(blocks) - look for lights on the grid, then add them to the block list you defined.

Code:
bool allOn = true;
bool allOff = false;

Define booleans named allOn and allOff. Set their default states (allOn is true, allOff is false).

Code:
for(int i = 0; i &lt; blocks.Count; i++)
This is a loop. It can look intimidating, but it is easy to break down into parts to say what it is doing:

you have a variable named "i" that is set to 0.

While "i" is less than the amount of blocks listed in your list (aka, how many lights you have), increment i by one number (i++ is the same as i = i+1) after the loop executes. Where the "++" lands tells C# when to increment the variable. Because it is i++, it is done AFTER each loop (it comes AFTER the variable? Get it?)

While the loop is running:
Code:
allOff |= (blocks[i] as IMyFunctionalBlock).Enabled;
allOn &amp;= (blocks[i] as IMyFunctionalBlock).Enabled;
Ok, this looks really intimidating, but again, let's break it down:

allOff variable has the |= assignment operator used. This can be a bit confusing, so I'll rewrite the code to do the same thing differently:

Code:
allOff = allOff | (blocks[i] as IMyFunctionalBlock).Enabled;
OK, so that doesn't seem to look better... but it is more easily explained. The "|" operator means "or" in C#. That means, what it is actually doing is:

is allOff true and the current block on? allOff is true.
is allOff false and the current block on? allOff is true.
is allOff true and the current block off? allOff is true.
is allOff false and the current block off? allOff is false.

The next point to note is the presence of the "as" keyword. Basically, it is telling the code to treat the "block" as the class IMyFunctionalBlock. This gives that block the same methods and properties (such as the Enabled property we see here.)

Let's do the same with the next line. &amp; is the logical "AND" operator, so:

Code:
allOn = allOn &amp; (blocks[i] as IMyFunctionalBlock).Enabled;
is allOn true and the current block on? allOn is true.
is allOn false and the current block on? allOn is false.
is allOn true and the current block off? allOn is false.
is allOn false and the current block false? allOn is false.

Code:
if(!allOff)
if is a logical evaluator. If the statement within is true, then it executes its code block. If it is false, it does not execute its code block. The exclamation point (!) operator means "not" in C#. so this code is:

IF NOT ALL OFF.

so, allOff is false, then the evaluation is true. Confused? Basically, think of it this way.

1+1 = 2.
I say 1+1 = 3.
Am I wrong?

If(I am wrong)
Execute code block.

So:

if(NOT TRUE (1+1 = 3))
Do stuff.

Anyhow:
Code:
actionName = actionNameBase+"_On";
so, IF allOff is false, actionName is now: "OnOff_On". How did I get that? If you "add" a string, it appends it to the end. The variable "actionNameBase" is "OnOff" and it says to add _On to the end of it. So:

actionName is assigned the value "OnOff" (actionNameBase) with _On appended to it.

Code:
if(allOn)
is allOn true? Then execute:

Code:
actionName = actionNameBase + "_Off";
Same as before, only we append "Off" to the end. So actionName is now "OnOff_Off"

Code:
for(int i = 0; i &lt;blocks.Count; ++i)
So, last bit left. We broke this down earlier, so let's do it again:

variable i is set to 0.
while i is less than the amount of blocks in our list,
increment i before the loop executes. (++ comes first, so do it first!)

